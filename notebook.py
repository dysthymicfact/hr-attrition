# -*- coding: utf-8 -*-
"""Another copy of notebook.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jhMiJw8g1PZw5-UEQ23l9wnlhiU7_VaY

# Proyek Akhir: Menyelesaikan Permasalahan Perusahaan Edutech

- Nama: Dewi Rachmawati
- Email: rchmw.dewi10@gmail.com
- Id Dicoding: iam_dewir

## Persiapan

### Menyiapkan library yang dibutuhkan
"""

!pip install sqlalchemy
!pip install joblib
!pip install scikit-learn
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import sqlalchemy
from sqlalchemy import create_engine
from sklearn.decomposition import PCA
from sklearn.feature_selection import RFE
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder, OneHotEncoder
from imblearn.over_sampling import SMOTE
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from xgboost import XGBClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
from sklearn.metrics import classification_report, confusion_matrix
import joblib

import warnings
warnings.filterwarnings('ignore')

"""### Menyiapkan data yang akan digunakan"""

dataset = 'https://raw.githubusercontent.com/dysthymicfact/hr-attrition/refs/heads/main/employee_data.csv'
hr_df = pd.read_csv(dataset)

"""## Data Understanding

### Assesing Data

Melihat 5 baris teratas dataset
"""

hr_df.head()

"""Melihat informasi dataset"""

hr_df.info()

"""**Insight:**
Dataset memiliki 1470 baris dan 35 kolom dengan 3 macam tipe data yakni object, integer dan float.

Mengecek masing-maisng jumlah kolom numerikal dan kategorikal
"""

num_cols = hr_df.select_dtypes(include=['int64','float64']).columns
cat_cols = hr_df.select_dtypes(include=['object']).columns

num_counts = len(num_cols)
cat_counts = len(cat_cols)

print(f"Jumlah kolom numerikal dalam dataset: {num_counts}")
print(f"Jumlah kolom kategorikal dalam dataset: {cat_counts}")

"""Mengecek missing values dalam dataset"""

hr_df.isnull().sum()

"""**Insight:**
Terdapat 1 kolom yang memiliki missing values yakni kolom atrrition dengan total missing values adalah 412 baris

Mengecek duplikasi data dalam dataset
"""

print("Jumlah duplikasi data dalam dataset:", hr_df.duplicated().sum())

"""**Insight:**
Dataset tidak memiliki duplikasi data

### Cleaning Data
"""

# Menangani missing values dalam dataset
df = hr_df.dropna()
df.isnull().sum()

# Cek data shape
print("Jumlah baris sebelum dibersihkan: ", hr_df.shape[0], ", Jumlah kolom: ", hr_df.shape[1])
print("Jumlah baris setelah dibersihkan: ", df.shape[0], ", Jumlah kolom: ", df.shape[1])

# Menyimpan data hasil cleaning
df.to_csv("employee_data_cleaned.csv", index=False)

"""Dataset hasil cleaning disimpan dalam format csv untuk keperluan dashboard

## Exploratory Data Analysis (EDA)
"""

# Cek data variabel numerikal
num_cols

# cek data variabel kategorikal
cat_cols

"""Analisis deskriptif statistik"""

df.describe(include='all')

"""Fitur Numerikal terhadap Attrition"""

# Konversi ke integer
df["Attrition"] = df["Attrition"].astype(int)

# Distribusi kolom target "Attrition"
count = df["Attrition"].value_counts()
percent = 100 * df["Attrition"].value_counts(normalize=True)

df_attrition = pd.DataFrame({"Jumlah karyawan": count, "Persentase": percent.round(1)})
print(df_attrition)

# Warna kontras untuk masing-masing kategori
color_map = {0: "steelblue", 1: "salmon"}

# `.map()` untuk memastikan nilai cocok dengan palet warna
df["Attrition_color"] = df["Attrition"].map(color_map)

# Visualisasi distribusi
plt.figure(figsize=(6,4))
ax = sns.barplot(x=df_attrition.index, y=df_attrition["Jumlah karyawan"],
                 palette=[color_map[val] for val in df_attrition.index])

# Tambahkan persentase di atas batang
for p, percentage in zip(ax.patches, df_attrition["Persentase"]):
    ax.annotate(f'{percentage:.1f}%',
                (p.get_x() + p.get_width() / 2, p.get_height()),
                ha='center', va='bottom', fontsize=12, fontweight='bold', color='black')

plt.title("Distribusi Attrition")
plt.ylabel("Jumlah karyawan")
plt.xlabel("Attrition")
plt.show()

# Pastikan kolom memiliki format numerik yang sesuai
df['Attrition'] = df['Attrition'].astype(float).astype(int)
df['Age'] = df['Age'].astype(int)

# ============================== Analisis Attrition by Age ==============================
# Mengelompokkan usia ke dalam rentang kategori
bins = [18, 25, 35, 45, 55, 65]
labels = ["18-25", "26-35", "36-45", "46-55", "56-65"]
df["Age_Group"] = pd.cut(df["Age"], bins=bins, labels=labels, right=False)

# Menghitung total karyawan & attrition berdasarkan kelompok usia
employee_per_age_group = df["Age_Group"].value_counts()
attrition_per_age_group = df[df['Attrition'] == 1]['Age_Group'].value_counts()
attrition_age_percentage = (attrition_per_age_group / employee_per_age_group) * 100

# Menampilkan Tabel Analisis
attrition_age_df = pd.DataFrame({
    "Total Employees": employee_per_age_group,
    "Attrition Count": attrition_per_age_group,
    "Attrition Rate (%)": attrition_age_percentage.round(1)
}).fillna(0)

print("\n Attrition Rate by Age Group:\n", attrition_age_df.sort_values("Attrition Rate (%)", ascending=False))

# Visualisasi
plt.figure(figsize=(8,5))
sns.barplot(x=attrition_age_percentage.index, y=attrition_age_percentage.values, palette="coolwarm")
plt.xlabel("Age Group", fontsize=12, fontweight="bold")
plt.ylabel("Attrition Rate (%)", fontsize=12, fontweight="bold")
plt.title("Distribution of Attrition Rate by Age Group", fontsize=14, fontweight="bold")
plt.xticks(rotation=0, fontsize=10)

# Menampilkan nilai persentase di atas setiap bar
for i, value in enumerate(attrition_age_percentage.values):
    plt.text(i, value + 0.5, f"{value:.1f}%", ha="center", fontsize=12, fontweight="bold")

plt.grid(axis="y", linestyle="--", alpha=0.5)
plt.show()

# Pastikan kolom memiliki format numerik yang sesuai
df['Attrition'] = df['Attrition'].astype(float).astype(int)
df['Education'] = df['Education'].astype(str).str.strip()

# ============================== Analisis Attrition by Education ==============================
# Menghitung total karyawan & attrition berdasarkan pendidikan
employee_per_education = df["Education"].value_counts()
attrition_per_education = df[df['Attrition'] == 1]['Education'].value_counts()
attrition_education_percentage = (attrition_per_education / employee_per_education) * 100

# Menampilkan Tabel Analisis
attrition_education_df = pd.DataFrame({
    "Total Employees": employee_per_education,
    "Attrition Count": attrition_per_education,
    "Attrition Rate (%)": attrition_education_percentage.round(1)
}).fillna(0)

print("\n Attrition Rate by Education Level:\n", attrition_education_df.sort_values("Attrition Rate (%)", ascending=False))

# Visualisasi
plt.figure(figsize=(8,5))
ax = sns.countplot(x="Education", hue="Attrition", data=df, palette=["#3498DB", "#FF5733"])

plt.xlabel("Education Level", fontsize=12, fontweight="bold")
plt.ylabel("Count", fontsize=12, fontweight="bold")
plt.title("Distribution of Attrition Rate by Education Level", fontsize=14, fontweight="bold")
plt.legend(["No Attrition", "Attrition"])
plt.grid(axis="y", linestyle="--", alpha=0.5)
plt.xticks(rotation=0, fontsize=10)

# Menampilkan nilai persentase di atas setiap bar
for bar in ax.patches:
    height = bar.get_height()
    if height > 0:  # Hanya menampilkan jika ada data
        plt.text(
            bar.get_x() + bar.get_width()/2,
            height + 0.5,
            f"{height:.0f}",
            ha="center", va="bottom", fontsize=12, fontweight="bold", color="black"
        )

plt.show()

# Pastikan kolom memiliki format numerik yang sesuai
df['Attrition'] = df['Attrition'].astype(float).astype(int)
df['DistanceFromHome'] = df['DistanceFromHome'].astype(int)

# ============================== Analisis Attrition by DistanceFromHome ==============================
# Menghitung total karyawan & attrition berdasarkan DistanceFromHome
employee_per_distance = df["DistanceFromHome"].value_counts().sort_index()
attrition_per_distance = df[df['Attrition'] == 1]['DistanceFromHome'].value_counts().sort_index()
attrition_distance_percentage = (attrition_per_distance / employee_per_distance) * 100

# Menampilkan Tabel Analisis
attrition_distance_df = pd.DataFrame({
    "Total Employees": employee_per_distance,
    "Attrition Count": attrition_per_distance,
    "Attrition Rate (%)": attrition_distance_percentage.round(1)
}).fillna(0)

print("\n Attrition Rate by Distance From Home:\n", attrition_distance_df.sort_values("Attrition Rate (%)", ascending=False))

# Visualisasi Distribusi dengan Histogram
plt.figure(figsize=(8,5))
sns.histplot(df[df['Attrition'] == 1]['DistanceFromHome'], bins=20, color="#FF5733", kde=True, label="Attrition")
sns.histplot(df[df['Attrition'] == 0]['DistanceFromHome'], bins=20, color="#3498DB", kde=True, label="No Attrition")
plt.xlabel("Distance From Home (km)", fontsize=12, fontweight="bold")
plt.ylabel("Count", fontsize=12, fontweight="bold")
plt.title("Distribution of Attrition Rate by Distance From Home", fontsize=14, fontweight="bold")
plt.legend()
plt.grid(axis="y", linestyle="--", alpha=0.5)
plt.show()

# Pastikan kolom memiliki format numerik yang sesuai
df['Attrition'] = df['Attrition'].astype(float).astype(int)
df['EnvironmentSatisfaction'] = df['EnvironmentSatisfaction'].astype(int)

# ============================== Analisis Attrition by Environment Satisfaction ==============================
# Menghitung total karyawan & attrition berdasarkan Environment Satisfaction
employee_per_env_sat = df["EnvironmentSatisfaction"].value_counts().sort_index()
attrition_per_env_sat = df[df['Attrition'] == 1]['EnvironmentSatisfaction'].value_counts().sort_index()
attrition_env_sat_percentage = (attrition_per_env_sat / employee_per_env_sat) * 100

# Menampilkan Tabel Analisis
attrition_env_sat_df = pd.DataFrame({
    "Total Employees": employee_per_env_sat,
    "Attrition Count": attrition_per_env_sat,
    "Attrition Rate (%)": attrition_env_sat_percentage.round(1)
}).fillna(0)

print("\n Attrition Rate by Environment Satisfaction:\n", attrition_env_sat_df.sort_values("Attrition Rate (%)", ascending=False))

# Visualisasi dengan Countplot
plt.figure(figsize=(8,5))
ax = sns.countplot(x="EnvironmentSatisfaction", hue="Attrition", data=df, palette=["#3498DB", "#FF5733"])  # Biru untuk No, Merah untuk Yes

plt.xlabel("Environment Satisfaction Level", fontsize=12, fontweight="bold")
plt.ylabel("Count", fontsize=12, fontweight="bold")
plt.title("Attrition vs Environment Satisfaction", fontsize=14, fontweight="bold")
plt.legend(["No Attrition", "Attrition"])
plt.grid(axis="y", linestyle="--", alpha=0.5)
plt.xticks(rotation=0, fontsize=10)

# Menampilkan nilai di atas setiap bar
for bar in ax.patches:
    height = bar.get_height()
    if height > 0:  # Hanya menampilkan jika ada data
        plt.text(
            bar.get_x() + bar.get_width()/2,
            height + 0.5,
            f"{height:.0f}",
            ha="center", va="bottom", fontsize=12, fontweight="bold", color="black"
        )

plt.show()

# Pastikan kolom memiliki format numerik yang sesuai
df['Attrition'] = df['Attrition'].astype(float).astype(int)
df['HourlyRate'] = df['HourlyRate'].astype(int)

# ============================== Analisis Attrition by Hourly Rate ==============================
# Menghitung total karyawan & attrition berdasarkan Hourly Rate
employee_per_hourly_rate = df["HourlyRate"].value_counts().sort_index()
attrition_per_hourly_rate = df[df['Attrition'] == 1]['HourlyRate'].value_counts().sort_index()
attrition_hourly_rate_percentage = (attrition_per_hourly_rate / employee_per_hourly_rate) * 100

# Menampilkan Tabel Analisis
attrition_hourly_rate_df = pd.DataFrame({
    "Total Employees": employee_per_hourly_rate,
    "Attrition Count": attrition_per_hourly_rate,
    "Attrition Rate (%)": attrition_hourly_rate_percentage.round(1)
}).fillna(0)

print("\n Attrition Rate by Hourly Rate:\n", attrition_hourly_rate_df.sort_values("Attrition Rate (%)", ascending=False))

# Visualisasi
plt.figure(figsize=(8,5))
sns.histplot(df[df['Attrition'] == 1]['HourlyRate'], bins=20, color="#FF5733", kde=True, label="Attrition")
sns.histplot(df[df['Attrition'] == 0]['HourlyRate'], bins=20, color="#3498DB", kde=True, label="No Attrition")
plt.xlabel("Hourly Rate ($)", fontsize=12, fontweight="bold")
plt.ylabel("Count", fontsize=12, fontweight="bold")
plt.title("Distribution of Attrition Rate by Hourly Rate", fontsize=14, fontweight="bold")
plt.legend()
plt.grid(axis="y", linestyle="--", alpha=0.5)
plt.show()

"""**Insight:** karyawan dengan hourly rate lebih tinggi tidak hanya lebih sedikit mengalami attrition tetapi juga memiliki distribusi yang lebih menyebar. Ini mungkin menunjukkan bahwa faktor lain seperti pengalaman kerja, job role, atau benefit tambahan juga mempengaruhi keputusan untuk bertahan. Sementara itu, distribusi karyawan yang keluar tampaknya lebih terkonsentrasi di bagian bawah kisaran hourly rate, yang bisa menjadi tanda bahwa mereka merasa kurang dihargai secara finansial atau mencari pekerjaan dengan kompensasi lebih baik.   """

# Pastikan kolom memiliki format numerik yang sesuai
df['Attrition'] = df['Attrition'].astype(float).astype(int)
df['JobInvolvement'] = df['JobInvolvement'].astype(int)

# ============================== Analisis Attrition by Job Involvement ==============================
# Menghitung total karyawan & attrition berdasarkan Job Involvement
employee_per_job_involvement = df["JobInvolvement"].value_counts().sort_index()
attrition_per_job_involvement = df[df['Attrition'] == 1]['JobInvolvement'].value_counts().sort_index()
attrition_job_involvement_percentage = (attrition_per_job_involvement / employee_per_job_involvement) * 100

# Menampilkan Tabel Analisis
attrition_job_involvement_df = pd.DataFrame({
    "Total Employees": employee_per_job_involvement,
    "Attrition Count": attrition_per_job_involvement,
    "Attrition Rate (%)": attrition_job_involvement_percentage.round(1)
}).fillna(0)

print("\n Attrition Rate by Job Involvement:\n", attrition_job_involvement_df.sort_values("Attrition Rate (%)", ascending=False))

# Visualisasi
plt.figure(figsize=(8,5))
ax = sns.countplot(x="JobInvolvement", hue="Attrition", data=df, palette=["#3498DB", "#FF5733"])  # Biru untuk No Attrition, Merah untuk Attrition

plt.xlabel("Job Involvement Level", fontsize=12, fontweight="bold")
plt.ylabel("Count", fontsize=12, fontweight="bold")
plt.title("Distribution of Attrition rate by Job Involvement", fontsize=14, fontweight="bold")
plt.legend(["No Attrition", "Attrition"])
plt.grid(axis="y", linestyle="--", alpha=0.5)
plt.xticks(rotation=0, fontsize=10)

# Menampilkan nilai di atas setiap bar
for bar in ax.patches:
    height = bar.get_height()
    if height > 0:  # Hanya menampilkan jika ada data
        plt.text(
            bar.get_x() + bar.get_width()/2,
            height + 0.5,
            f"{height:.0f}",
            ha="center", va="bottom", fontsize=12, fontweight="bold", color="black"
        )

plt.show()

# Pastikan kolom memiliki format numerik yang sesuai
df['Attrition'] = df['Attrition'].astype(float).astype(int)
df['JobLevel'] = df['JobLevel'].astype(int)

# ============================== Analisis Attrition by Job Level ==============================
# Menghitung total karyawan & attrition berdasarkan Job Level
employee_per_job_level = df["JobLevel"].value_counts().sort_index()
attrition_per_job_level = df[df['Attrition'] == 1]['JobLevel'].value_counts().sort_index()
attrition_job_level_percentage = (attrition_per_job_level / employee_per_job_level) * 100

# Menampilkan Tabel Analisis
attrition_job_level_df = pd.DataFrame({
    "Total Employees": employee_per_job_level,
    "Attrition Count": attrition_per_job_level,
    "Attrition Rate (%)": attrition_job_level_percentage.round(1)
}).fillna(0)

print("\n Attrition Rate by Job Level:\n", attrition_job_level_df.sort_values("Attrition Rate (%)", ascending=False))

# Visualisasi dengan Countplot
plt.figure(figsize=(8,5))
ax = sns.countplot(x="JobLevel", hue="Attrition", data=df, palette=["#3498DB", "#FF5733"])  # Biru untuk No Attrition, Merah untuk Attrition

plt.xlabel("Job Level", fontsize=12, fontweight="bold")
plt.ylabel("Count", fontsize=12, fontweight="bold")
plt.title("Distribution of Attrition Rate by Job Level", fontsize=14, fontweight="bold")
plt.legend(["No Attrition", "Attrition"])
plt.grid(axis="y", linestyle="--", alpha=0.5)
plt.xticks(rotation=0, fontsize=10)

# Menampilkan nilai di atas setiap bar
for bar in ax.patches:
    height = bar.get_height()
    if height > 0:  # Hanya menampilkan jika ada data
        plt.text(
            bar.get_x() + bar.get_width()/2,
            height + 0.5,
            f"{height:.0f}",
            ha="center", va="bottom", fontsize=12, fontweight="bold", color="black"
        )

plt.show()

# Pastikan kolom memiliki format numerik yang sesuai
df['Attrition'] = df['Attrition'].astype(float).astype(int)
df['JobSatisfaction'] = df['JobSatisfaction'].astype(int)

# ============================== Analisis Attrition by Job Satisfaction ==============================
# Menghitung total karyawan & attrition berdasarkan Job Satisfaction
employee_per_job_satisfaction = df["JobSatisfaction"].value_counts().sort_index()
attrition_per_job_satisfaction = df[df['Attrition'] == 1]['JobSatisfaction'].value_counts().sort_index()
attrition_job_satisfaction_percentage = (attrition_per_job_satisfaction / employee_per_job_satisfaction) * 100

# Menampilkan Tabel Analisis
attrition_job_satisfaction_df = pd.DataFrame({
    "Total Employees": employee_per_job_satisfaction,
    "Attrition Count": attrition_per_job_satisfaction,
    "Attrition Rate (%)": attrition_job_satisfaction_percentage.round(1)
}).fillna(0)

print("\n Attrition Rate by Job Satisfaction:\n", attrition_job_satisfaction_df.sort_values("Attrition Rate (%)", ascending=False))

# Visualisasi dengan Countplot
plt.figure(figsize=(8,5))
ax = sns.countplot(x="JobSatisfaction", hue="Attrition", data=df, palette=["#3498DB", "#FF5733"])  # Biru untuk No Attrition, Merah untuk Attrition

plt.xlabel("Job Satisfaction Level", fontsize=12, fontweight="bold")
plt.ylabel("Count", fontsize=12, fontweight="bold")
plt.title("Distribution of Attrition Rate by Job Satisfaction", fontsize=14, fontweight="bold")
plt.legend(["No Attrition", "Attrition"])
plt.grid(axis="y", linestyle="--", alpha=0.5)
plt.xticks(rotation=0, fontsize=10)

# Menampilkan nilai di atas setiap bar
for bar in ax.patches:
    height = bar.get_height()
    if height > 0:  # Hanya menampilkan jika ada data
        plt.text(
            bar.get_x() + bar.get_width()/2,
            height + 0.5,
            f"{height:.0f}",
            ha="center", va="bottom", fontsize=12, fontweight="bold", color="black"
        )

plt.show()

# Pastikan kolom memiliki format numerik yang sesuai
df['Attrition'] = df['Attrition'].astype(float).astype(int)
df['MonthlyIncome'] = df['MonthlyIncome'].astype(int)

# ============================== Analisis Attrition by Monthly Income ==============================
# Menghitung total karyawan & attrition berdasarkan Monthly Income
employee_per_income = df["MonthlyIncome"].value_counts().sort_index()
attrition_per_income = df[df['Attrition'] == 1]['MonthlyIncome'].value_counts().sort_index()
attrition_income_percentage = (attrition_per_income / employee_per_income) * 100

# Menampilkan Tabel Analisis
attrition_income_df = pd.DataFrame({
    "Total Employees": employee_per_income,
    "Attrition Count": attrition_per_income,
    "Attrition Rate (%)": attrition_income_percentage.round(1)
}).fillna(0)

print("\n Attrition Rate by Monthly Income:\n", attrition_income_df.sort_values("Attrition Rate (%)", ascending=False))

# Visualisasi dengan Histogram + KDE
plt.figure(figsize=(8,5))
sns.histplot(df[df['Attrition'] == 1]['MonthlyIncome'], bins=20, color="#FF5733", kde=True, label="Attrition")
sns.histplot(df[df['Attrition'] == 0]['MonthlyIncome'], bins=20, color="#3498DB", kde=True, label="No Attrition")
plt.xlabel("Monthly Income ($)", fontsize=12, fontweight="bold")
plt.ylabel("Count", fontsize=12, fontweight="bold")
plt.title("Distribution of Attrition Rate by Monthly Income", fontsize=14, fontweight="bold")
plt.legend()
plt.grid(axis="y", linestyle="--", alpha=0.5)
plt.show()

"""**Insight:** Karyawan dengan pendapatan bulanan yang lebih rendah memiliki proporsi Attrition yang lebih tinggi dibandingkan dengan berpendapatan lebih tinggi."""

# Pastikan kolom memiliki format numerik yang sesuai
df['Attrition'] = df['Attrition'].astype(float).astype(int)
df['TotalWorkingYears'] = df['TotalWorkingYears'].astype(int)

# ============================== Analisis Attrition by Total Working Years ==============================
# Menghitung total karyawan & attrition berdasarkan TotalWorkingYears
employee_per_years = df["TotalWorkingYears"].value_counts().sort_index()
attrition_per_years = df[df['Attrition'] == 1]['TotalWorkingYears'].value_counts().sort_index()
attrition_years_percentage = (attrition_per_years / employee_per_years) * 100

# Menampilkan Tabel Analisis
attrition_years_df = pd.DataFrame({
    "Total Employees": employee_per_years,
    "Attrition Count": attrition_per_years,
    "Attrition Rate (%)": attrition_years_percentage.round(1)
}).fillna(0)

print("\n Attrition Rate by Total Working Years:\n", attrition_years_df.sort_values("Attrition Rate (%)", ascending=False))

# Visualisasi dengan Histogram + KDE
plt.figure(figsize=(8,5))
sns.histplot(df[df['Attrition'] == 1]['TotalWorkingYears'], bins=20, color="#FF5733", kde=True, label="Attrition")
sns.histplot(df[df['Attrition'] == 0]['TotalWorkingYears'], bins=20, color="#3498DB", kde=True, label="No Attrition")
plt.xlabel("Total Working Years", fontsize=12, fontweight="bold")
plt.ylabel("Count", fontsize=12, fontweight="bold")
plt.title("Distribution of Attrition Rate by Total Working Years", fontsize=14, fontweight="bold")
plt.legend()
plt.grid(axis="y", linestyle="--", alpha=0.5)
plt.show()

"""**Insight:** Karyawan dengan pengalaman kerja lebih sedikit (0-10 tahun) cenderung lebih mudah attrition daripada karyawan dengan pengalaman kerja lebih lama. Ini menunjukkan pentingnya retensi awal karir dan pengembangan karyawan."""

# Pastikan kolom memiliki format numerik yang sesuai
df['Attrition'] = df['Attrition'].astype(float).astype(int)
df['YearsAtCompany'] = df['YearsAtCompany'].astype(int)

# ============================== Analisis Attrition by Years At Company ==============================
# Menghitung total karyawan & attrition berdasarkan YearsAtCompany
employee_per_years = df["YearsAtCompany"].value_counts().sort_index()
attrition_per_years = df[df['Attrition'] == 1]['YearsAtCompany'].value_counts().sort_index()
attrition_years_percentage = (attrition_per_years / employee_per_years) * 100

# Menampilkan Tabel Analisis
attrition_years_df = pd.DataFrame({
    "Total Employees": employee_per_years,
    "Attrition Count": attrition_per_years,
    "Attrition Rate (%)": attrition_years_percentage.round(1)
}).fillna(0)

print("\n Attrition Rate by Years At Company:\n", attrition_years_df.sort_values("Attrition Rate (%)", ascending=False))

# Visualisasi dengan Histogram + KDE
plt.figure(figsize=(8,5))
sns.histplot(df[df['Attrition'] == 1]['YearsAtCompany'], bins=20, color="#FF5733", kde=True, label="Attrition")
sns.histplot(df[df['Attrition'] == 0]['YearsAtCompany'], bins=20, color="#3498DB", kde=True, label="No Attrition")
plt.xlabel("Years at Company", fontsize=12, fontweight="bold")
plt.ylabel("Count", fontsize=12, fontweight="bold")
plt.title("Distribution of Attrition Rate by Years At Company", fontsize=14, fontweight="bold")
plt.legend()
plt.grid(axis="y", linestyle="--", alpha=0.5)
plt.show()

"""**Insight:** Karyawan dengan masa kerja singkat (0-5 tahun) cenderung memiliki tingkat attrition lebih tinggi. Ini membuktikan bahwa karyawan baru cenderung lebih sering cepat keluar dari perusahaan (tidak mampu bertahan)."""

# Pastikan kolom memiliki format numerik yang sesuai
df['Attrition'] = df['Attrition'].astype(float).astype(int)
df['WorkLifeBalance'] = df['WorkLifeBalance'].astype(int)

# ============================== Analisis Attrition by Work-Life Balance ==============================
# Menghitung total karyawan & attrition berdasarkan Work-Life Balance
employee_per_worklife = df["WorkLifeBalance"].value_counts().sort_index()
attrition_per_worklife = df[df['Attrition'] == 1]['WorkLifeBalance'].value_counts().sort_index()
attrition_worklife_percentage = (attrition_per_worklife / employee_per_worklife) * 100

# Menampilkan Tabel Analisis
attrition_worklife_df = pd.DataFrame({
    "Total Employees": employee_per_worklife,
    "Attrition Count": attrition_per_worklife,
    "Attrition Rate (%)": attrition_worklife_percentage.round(1)
}).fillna(0)

print("\n Attrition Rate by Work-Life Balance:\n", attrition_worklife_df.sort_values("Attrition Rate (%)", ascending=False))

# Visualisasi dengan Countplot
plt.figure(figsize=(8,5))
ax = sns.countplot(x="WorkLifeBalance", hue="Attrition", data=df, palette=["#3498DB", "#FF5733"])  # Biru untuk No Attrition, Merah untuk Attrition

plt.xlabel("Work-Life Balance Level", fontsize=12, fontweight="bold")
plt.ylabel("Count", fontsize=12, fontweight="bold")
plt.title("Distribution of Attrition Rate by Work-Life Balance", fontsize=14, fontweight="bold")
plt.legend(["No Attrition", "Attrition"])
plt.grid(axis="y", linestyle="--", alpha=0.5)
plt.xticks(rotation=0, fontsize=10)

# Menampilkan nilai di atas setiap bar
for bar in ax.patches:
    height = bar.get_height()
    if height > 0:  # Hanya menampilkan jika ada data
        plt.text(
            bar.get_x() + bar.get_width()/2,
            height + 0.5,
            f"{height:.0f}",
            ha="center", va="bottom", fontsize=12, fontweight="bold", color="black"
        )

plt.show()

"""Work Life Balance:

1: Low\
2: Good\
3: Excellent\
4: Outstanding

**Insight:** Berdasarkan persentase attrition rate, karyawan dengan tingkat "Low" memiliki kecenderungan lebih cepat keluar dari perusahaan dilanjutkan karyawan dengan tingkat oustanding, good dan excellent.
"""

# Korelasi Fitur Numerik dengan Attrition
corr_matrix = df.corr(numeric_only=True)

# Visualisasi Korelasi
plt.figure(figsize=(10, 8))
sns.heatmap(corr_matrix[['Attrition']].sort_values(by='Attrition', ascending=False), annot=True, cmap="coolwarm")
plt.title("Korelasi Fitur Numerik dengan Attrition")
plt.show()

"""Berdasarkan visualisasi heatmap di atas, fitur numerik yang memiliki hubungan kuat terhadap attrition adalah DistanceFromHome, NumCompaniesWorked, dan MonthlyRate.

Fitur Kategorikal terhadap Attrition
"""

for col in cat_cols:
    # Hitung distribusi antara kategori fitur dan attrition
    attrition_distribution = pd.crosstab(df[col], df["Attrition"])

    # Normalisasi setiap kategori agar berbentuk proporsi
    attrition_distribution_percentage = attrition_distribution.div(attrition_distribution.sum(axis=1), axis=0)

    # Plot stacked bar chart
    attrition_distribution_percentage.plot(kind="bar", stacked=True, figsize=(8, 5))

    # Tambahkan detail grafik
    plt.title(f"Proportional Distribution of Attrition by {col}")
    plt.xlabel(col)
    plt.ylabel("Proportion")
    plt.legend(title="Attrition", loc="upper right")
    plt.xticks(rotation=45, ha="right")  # Rotasi label untuk visibilitas yang lebih baik
    plt.tight_layout()  # Optimalisasi tata letak
    plt.show()

"""Berdasarkan stacked bar chart terdapat beberapa insight yang diperoleh:
1. OverTime (Lembur): karyawan yang sering lembur (Overtime = Yes) memiliki kecenderungan attrition yang lebih tinggi
2. MaritalStatus (Status Pernikahan): karyawan single (belum menikah) lebih rentan keluar dibandingkan sudah menikah. Mungkin dikarenakan masih belum memiliki tanggungan
3. JobRole: pekerjaan dengan peran Sales Representative dan Laboratory Technician memiliki kecenderungan attrition yang lebih tinggi
4. BusinessTravel: karyawan yang sering melakukan perjalanan bisnis memiliki kecenderungan risiko keluar lebih tinggi dibandingkan kategori lainnya
"""

from scipy.stats import chi2_contingency

chi_square_results = []

# Gunakan fitur kategorikal dari dataset asli (`df`)
for feature in cat_cols:  # Sesuaikan dengan fitur kategorikal yang telah kamu definisikan
    if feature in df.columns:  # Pastikan fitur ada dalam dataset
        contingency_table = pd.crosstab(df[feature], df["Attrition"])  # Membuat tabel kontingensi

        # Hitung uji Chi-Squared
        chi2, p, dof, expected = chi2_contingency(contingency_table)

        # Simpan hasil dalam list
        chi_square_results.append({
            "Feature": feature,
            "Chi-Square Statistic": chi2,
            "p-value": p
        })

# Konversi hasil ke dalam DataFrame
chi_square_df = pd.DataFrame(chi_square_results)

# Urutkan berdasarkan nilai Chi-Squared terbesar untuk melihat fitur paling berpengaruh
chi_square_df = chi_square_df.sort_values(by="Chi-Square Statistic", ascending=False)

print("\n Hasil Chi-Squared Test untuk Fitur Kategorikal terhadap Attrition:\n")
chi_square_df

"""Berdasarkan hasil chi-squared test, diperoleh beberapa informasi sebagai berikut:\
1). Fitur Signifikan terhadap Attrition (p-value < 0,05), menunjukkan hubungan kuat dengan attrition
  * Overtime: karyawan yang bekerja lembur memiliki kemungkinan lebih besar untuk keluar dibandingkan yang bertahan. Bisa jadi karena kelelahan atau ketidakseimbangan work-life.
  * JobRole: peran pekerjaan tertentu mungkin memiliki beban kerja lebih tinggi atau jalur karier yang kurang menarik, sehingga meningkatkan attrition.
  * MaritalStatus: karyawan yang sudah menikah mungkin lebih stabil dalam pekerjaan dibandingkan karyawan yang masih single. Mereka cenderung mencari pekerjaan dengan fleksibilitas yang lebih.
  * BusinessTravel: karyawan yang sering melakukan perjalanan bisa lebih rentan terhadap kelelahan dan burnout sehingga meningkatkan kemungkinan mereka keluar.

2). Fitur Tidak Signifikan terhadap Attrition (p-value > 0,05), menunjukkan hubungan yang lemah dengan attrition
  * Fitur EducationField, Department, Gender, dan Over18 tidak memiliki hubungan kuat dengan attrition.

Korelasi Fitur Gabungan terhadap Attrition
"""

# Salin dataset agar tidak mengubah data asli
df_encoded = df.copy()

# Identifikasi kolom kategorikal
categorical_columns = df_encoded.select_dtypes(include=["object", "category"]).columns

# Konversi kolom kategorikal ke numerik menggunakan LabelEncoder
encoder = LabelEncoder()
for column in categorical_columns:
    df_encoded[column] = encoder.fit_transform(df_encoded[column])

# Hapus fitur yang tidak berkontribusi terhadap korelasi (berisi nilai tetap atau tidak relevan)
columns_to_drop = ["EmployeeCount", "Over18", "StandardHours", "Attrition_color"]
df_encoded = df_encoded.drop(columns=columns_to_drop, errors="ignore")

# Hitung matriks korelasi untuk seluruh fitur dalam dataset
correlation_matrix = df_encoded.corr()

# Ambil korelasi fitur terhadap 'Attrition' dan urutkan dari yang paling signifikan
corr_attrition = correlation_matrix["Attrition"].sort_values(ascending=False)

# Hapus kolom 'Attrition' dari daftar sebelum visualisasi
corr_attrition = corr_attrition.drop(labels=["Attrition"])

# Menampilkan tabel korelasi
print("\n Korelasi Fitur terhadap Attrition:\n", corr_attrition)

# ============================== Visualisasi Korelasi dalam Bar Chart ==============================
plt.figure(figsize=(10,6))
sns.barplot(x=corr_attrition.values, y=corr_attrition.index, palette="coolwarm")
plt.title("Korelasi Fitur terhadap Attrition", fontsize=14, fontweight="bold")
plt.xlabel("Nilai Korelasi", fontsize=12)
plt.ylabel("Fitur", fontsize=12)
plt.xticks(rotation=45)
plt.grid(axis="x", linestyle="--", alpha=0.5)
plt.show()

"""**Insights:**

**Top 3 Korelasi Positif terhadap Attrition**  

1️). **OverTime (+0.256)**\
Karyawan yang sering bekerja lembur memiliki kemungkinan lebih tinggi untuk keluar dari perusahaan. Ini menunjukkan bahwa **jam kerja yang berlebihan mungkin menjadi faktor stres atau ketidakpuasan** yang mendorong mereka mencari peluang di tempat lain dengan keseimbangan kerja yang lebih baik. Bisa jadi, kebijakan lembur yang terlalu sering menyebabkan burnout dan mengurangi motivasi untuk tetap bertahan.  

2️). **MaritalStatus (+0.178)**\
Status pernikahan memiliki korelasi positif dengan attrition, yang bisa mengindikasikan bahwa **karyawan lajang atau dalam kondisi pernikahan tertentu lebih cenderung meninggalkan perusahaan**. Mungkin karyawan yang belum menikah lebih fleksibel dalam mencari pekerjaan baru atau pindah ke lokasi lain, sementara mereka yang sudah menikah mungkin memiliki pertimbangan finansial atau kestabilan yang berbeda dalam keputusan untuk bertahan atau keluar.  

3️). **DistanceFromHome (+0.078)**\
Semakin jauh jarak rumah dari tempat kerja, semakin besar kemungkinan karyawan mengalami attrition. Hal ini bisa terjadi karena **waktu perjalanan yang panjang menyebabkan kelelahan atau ketidakpuasan** sehingga mereka memilih pekerjaan yang lebih dekat dengan rumah. Selain itu, karyawan dengan perjalanan jauh mungkin mengalami lebih banyak kesulitan dalam mengelola keseimbangan antara kehidupan pribadi dan pekerjaan, yang mendorong mereka untuk mencari opsi lain.  

---

**Top 3 Korelasi Negatif terhadap Attrition**  

1️). **TotalWorkingYears (-0.177)**\
Karyawan dengan pengalaman kerja lebih lama memiliki kecenderungan lebih rendah untuk keluar dari perusahaan. Ini bisa karena **mereka telah membangun stabilitas finansial dan karier** atau mereka sudah nyaman dengan lingkungan kerja dan lebih kecil kemungkinannya untuk mencari peluang lain. Selain itu, mereka mungkin memiliki lebih banyak insentif seperti program pensiun atau tunjangan senioritas yang membuat mereka tetap bertahan.  

2️). **Age (-0.172)**\
 Semakin tua usia karyawan, semakin kecil kemungkinan mereka mengalami attrition. Karyawan yang lebih tua mungkin **lebih stabil dalam pekerjaan mereka, memiliki tanggung jawab finansial lebih besar, atau merasa lebih nyaman dengan peran yang sudah mereka kuasai**. Mereka cenderung mencari kestabilan daripada mengejar peluang baru, terutama jika mereka sudah memiliki posisi yang cukup mapan dalam perusahaan.  

3️). **JobLevel (-0.169)**\
Karyawan dengan level jabatan lebih tinggi memiliki tingkat attrition yang lebih rendah, mungkin karena mereka **sudah mendapatkan manfaat finansial dan jabatan yang lebih stabil**. Semakin tinggi level pekerjaan, semakin besar kemungkinan bahwa mereka memiliki keterlibatan tinggi dalam perusahaan serta insentif seperti bonus, gaji lebih tinggi, dan jalur karier yang jelas.

## Data Preparation / Preprocessing
"""

# Fitur seleksi
selected_features = ['Attrition', 'OverTime', 'JobRole', 'MaritalStatus', 'BusinessTravel', 'DistanceFromHome', 'NumCompaniesWorked', 'MonthlyRate', 'TotalWorkingYears', 'Age', 'JobLevel']

# Membuat dataframe selection
df_selection = df[selected_features]
df_selection.head()

"""Berikut adalah alasan mengapa fitur-fitur di atas relevan:

**1. OverTime**
- Karyawan yang sering lembur mungkin mengalami **kelelahan atau ketidakseimbangan work-life**, yang meningkatkan kemungkinan keluar dari perusahaan.  

**2. JobRole**
- Peran pekerjaan bisa menentukan **beban kerja, jalur karier, dan kepuasan kerja**, sehingga memengaruhi keputusan untuk bertahan atau keluar.  

**3. MaritalStatus**
- Status pernikahan bisa berhubungan dengan **stabilitas pekerjaan**, karena karyawan yang sudah menikah mungkin lebih mempertimbangkan manfaat jangka panjang.  
- Sebaliknya, mereka yang belum menikah bisa lebih fleksibel dalam mencari peluang baru.

**4. BusinessTravel**
- Perjalanan bisnis yang terlalu sering dapat menyebabkan **kelelahan** atau kurangnya work-life balance.  
- Karyawan yang lebih sering bepergian mungkin lebih cenderung mencari pekerjaan dengan fleksibilitas lebih.

**5. DistanceFromHome**
- Semakin jauh lokasi tempat tinggal dari kantor, semakin besar potensi **beban perjalanan dan kejenuhan**.  
- Bisa menjadi faktor utama bagi karyawan yang mencari posisi lebih dekat dengan rumah.

**6. NumCompaniesWorked**
- Jumlah perusahaan sebelumnya bisa menunjukkan **stabilitas karier seseorang**.  
- Karyawan dengan banyak pengalaman kerja sebelumnya mungkin lebih **terbuka terhadap peluang baru**.

**7. MonthlyRate**
- Gaji bulanan adalah indikator kepuasan finansial karyawan.  
- Jika gaji tidak kompetitif dibanding industri, bisa memicu **keputusan keluar untuk mencari kompensasi lebih baik**.

**8. TotalWorkingYears**
- Pengalaman kerja total bisa berpengaruh pada **loyalitas terhadap perusahaan**.  
- Karyawan dengan pengalaman lebih banyak mungkin lebih mempertimbangkan stabilitas kerja.

**9. Age**
- Usia bisa berhubungan dengan **keputusan karier dan preferensi kerja**.  
- Karyawan yang lebih muda mungkin lebih banyak berpindah kerja dibanding yang lebih senior.

**10. JobLevel**
- Tingkat jabatan menunjukkan **pengaruh dan keterlibatan karyawan dalam organisasi**.  
- Level pekerjaan rendah mungkin lebih mudah mengalami attrition dibanding senior-level.


**Kesimpulan**\
Pilihan fitur ini menunjukkan bahwa **faktor operasional (OverTime, BusinessTravel), demografi (Age, MaritalStatus), dan keuangan (MonthlyRate, JobLevel)** sebagai elemen kunci yang mempengaruhi attrition.  



"""

# One Hot-Encoding untuk kolom kategorikal
df_encoded = pd.get_dummies(df_selection, dtype=int)

df_encoded.head()

df_encoded.info()

X = df_encoded.drop("Attrition", axis=1)
Y = df_encoded["Attrition"]

print("Shape of X:", X.shape)
print("Shape of Y:", Y.shape)

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Misal X dan y adalah fitur dan target
X_train, X_test, y_train, y_test = train_test_split(X_scaled, Y, test_size=0.2, random_state=42)

# Terapkan SMOTE hanya pada data training
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X_train, y_train)

print("Distribusi sebelum SMOTE:\n", y_train.value_counts())
print("Distribusi sesudah SMOTE:\n", pd.Series(y_resampled).value_counts())

joblib.dump(scaler, 'scaler.pkl')

"""## Modelling"""

# Definisikan model
models = {
    "Logistic Regression": LogisticRegression(),
    "Random Forest": RandomForestClassifier(n_estimators=100, random_state=42),
    "XGBoost": XGBClassifier(n_estimators=100, random_state=42)
}

# Training setiap model
trained_models = {}
for name, model in models.items():
    model.fit(X_train, y_train)
    trained_models[name] = model  # Simpan model yang sudah dilatih

"""## Evaluation"""

# Evaluasi model dengan classification report & confusion matrix
for name, model in trained_models.items():
    y_pred = model.predict(X_test)

    print(f"\n🔹 Model: {name}")
    print("Classification Report:")
    print(classification_report(y_test, y_pred))

    # Confusion Matrix
    cm = confusion_matrix(y_test, y_pred)
    plt.figure(figsize=(5,4))
    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=["Stayed", "Attrition"], yticklabels=["Stayed", "Attrition"])
    plt.xlabel("Predicted Label")
    plt.ylabel("True Label")
    plt.title(f"Confusion Matrix: {name}")
    plt.show()

"""## Modelling Ensemble"""

from sklearn.ensemble import VotingClassifier

# Inisialisasi model
log_reg = LogisticRegression(class_weight="balanced", max_iter=1000, random_state=42)
rf = RandomForestClassifier(n_estimators=100, class_weight="balanced", random_state=42)
xgb = XGBClassifier(use_label_encoder=False, eval_metric="logloss", random_state=42)

# Voting classifier
voting_model = VotingClassifier(
    estimators=[('lr', log_reg), ('rf', rf), ('xgb', xgb)],
    voting="soft"  # gunakan "hard" jika hanya ingin mayoritas voting
)

# Fit model pada data training hasil SMOTE
voting_model.fit(X_resampled, y_resampled)

# Evaluasi model
from sklearn.metrics import classification_report

y_pred = voting_model.predict(X_test)
print("🔹 Model: Voting Ensemble")
print(classification_report(y_test, y_pred))

# Ambil model tree-based dari ensemble
rf_model = voting_model.named_estimators_['rf']
xgb_model = voting_model.named_estimators_['xgb']

# Ambil nama fitur
feature_names = X.columns  # gunakan X dari data finalmu

# Hitung importance rata-rata
avg_importance = (
    rf_model.feature_importances_ + xgb_model.feature_importances_
) / 2

# Buat DataFrame untuk visualisasi
importances_df = pd.DataFrame({
    'Feature': feature_names,
    'Average Importance': avg_importance
}).sort_values(by='Average Importance', ascending=False)

# Visualisasi
plt.figure(figsize=(10, 6))
plt.barh(importances_df['Feature'][:10][::-1], importances_df['Average Importance'][:10][::-1])
plt.xlabel("Average Feature Importance")
plt.title("Top 10 Important Features (RF + XGB)")
plt.tight_layout()
plt.show()

"""Berdasarkan hasil interpretasi model ensemble terhadap data attrition, diperoleh bahwa faktor paling berpengaruh dalam memprediksi kemungkinan karyawan keluar meliputi beban kerja berlebih (OverTime), status pernikahan (Single), tingkat jabatan (JobLevel), dan faktor demografis serta kompensasi seperti usia, jumlah perusahaan sebelumnya, jarak rumah ke kantor, dan gaji bulanan. Temuan ini menunjukkan bahwa keputusan karyawan untuk keluar sangat dipengaruhi oleh kombinasi tekanan kerja, karakteristik personal, dan kepuasan terhadap lingkungan kerja. Insight ini dapat menjadi dasar strategis bagi tim HR untuk menyusun kebijakan retensi yang lebih tepat sasaran dan berbasis data."""

# Simpan Random Forest dan XGBoost yang sudah dilatih
joblib.dump(trained_models["Random Forest"], "random_forest.pkl")
joblib.dump(trained_models["XGBoost"], "xgboost.pkl")

"""## Deployment"""

# Muat model dan scaler
rf_model = joblib.load('random_forest.pkl')
xgb_model = joblib.load('xgboost.pkl')
loaded_scaler = joblib.load('scaler.pkl')

# Data dummy karyawan dengan risiko tinggi attrition
df_dummy_attrition = pd.DataFrame({
    "DistanceFromHome": [20],
    "NumCompaniesWorked": [3],
    "MonthlyRate": [8000],
    "TotalWorkingYears": [3],
    "Age": [25],
    "JobLevel": [1],
    "OverTime_No": [0],
    "OverTime_Yes": [1],
    "JobRole_Healthcare Representative": [0],
    "JobRole_Human Resources": [0],
    "JobRole_Laboratory Technician": [0],
    "JobRole_Manager": [0],
    "JobRole_Manufacturing Director": [0],
    "JobRole_Research Director": [0],
    "JobRole_Research Scientist": [0],
    "JobRole_Sales Executive": [0],
    "JobRole_Sales Representative": [1],
    "MaritalStatus_Divorced": [0],
    "MaritalStatus_Married": [0],
    "MaritalStatus_Single": [1],
    "BusinessTravel_Non-Travel": [0],
    "BusinessTravel_Travel_Frequently": [1],
    "BusinessTravel_Travel_Rarely": [0]
})

# Normalisasi data dummy dengan scaler
df_dummy_scaled = loaded_scaler.transform(df_dummy_attrition)

# Mapping hasil prediksi
mapping = {0: "Karyawan kemungkinan akan Stay", 1: "Karyawan kemungkinan akan Leave"}

# Prediksi dengan kedua model
rf_proba = rf_model.predict_proba(df_dummy_scaled)[:, 1]  # Probabilitas kelas "Leave" dari RF
xgb_proba = xgb_model.predict_proba(df_dummy_scaled)[:, 1]  # Probabilitas kelas "Leave" dari XGB

# Ensemble dengan average voting
ensemble_proba = (rf_proba + xgb_proba) / 2  # Rata-rata probabilitas dari kedua model
ensemble_pred = [1 if p >= 0.5 else 0 for p in ensemble_proba]  # Prediksi final berdasarkan threshold 0.5

# Tampilkan hasil prediksi
print(f"Prediksi Ensemble: {mapping[ensemble_pred[0]]}")
print(f"Probabilitas Stay: {(1 - ensemble_proba[0]) * 100:.2f}%")
print(f"Probabilitas Leave: {ensemble_proba[0] * 100:.2f}%")

pip freeze > requirements.txt